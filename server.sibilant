(include "./core.sibilant")

"---------------  ** Server Functions **   ---------------"


"/****************************************************************
;;  banner
;; 
******************************************************************/ "
(var banner "
╔╦╗┌─┐┌─┐┬┌─  ╔═╗┬─┐┌─┐┌─┐┌┐┌┬┌─┐┌─┐┬─┐
 ║ ├─┤└─┐├┴┐  ║ ║├┬┘│ ┬├─┤││││┌─┘├┤ ├┬┘
 ╩ ┴ ┴└─┘┴ ┴  ╚═╝┴└─└─┘┴ ┴┘└┘┴└─┘└─┘┴└─
             -a crossbeam' task organizing app..")


"/****************************************************************
;;  db variable
;; 
******************************************************************/ "
(var db "")


"/****************************************************************
;;  function to initialize db by reading ./data.json
;; 
******************************************************************/ "
(def init-db (data-file) 
 (assign db (read-json data-file)))


"/****************************************************************
;;  handler function for index endpoint :: /
;; 
******************************************************************/ "
(def index-handler (req res)
 (res.write-head 200 {"Content-Type" "text/html"})
 (res.end 
  "<body><h1>Welcome to `Task Organizer` </h1> 
            </h7><pre>                        - a crossbeam task organizing app' </pre></h7> 
            <h2>Api's</h2>
            <ul>
            <li>/tasks
                 <ul><b><li>GET /tasks</b>            <i>gets all the define tasks.</i></li></ul>
                  <code> </code>
            </li>
            <br>
            <li>/determine-order
                 <ul><li><b>POST /determine-order</b> <i>takes list of task as input and gives the ordered list of tasks dependecies.</i></li>
                     <br>
                     <li>Example
                  <br>
                 <code>  curl -X POST http://localhost:8001/determine-order
                              -H \"Content-Type: application/json\" 
                              -d \"[\\\"make a sandwich\\\"]\" 
                  </code>
            </li>
                </ul>
            
                 
                 
            </li></ul>
            </body>" ))


"/****************************************************************
;;  handler function for tasks endpoint :: /tasks
;; 
******************************************************************/ "
(def tasks-handler (req res)
 (res.write-head 200 {"Content-Type" "text/json"})
  (res.end (JSON.stringify db)))


"/****************************************************************
;;  variable to hold the unsupported method status
;; 
******************************************************************/ "
(var unsupported-method {status "405"
                         message "method not supported"} )


"/****************************************************************
;;  helper function to convert the body content to json
;;  while making POST call on api :: /determine-order
;; 
******************************************************************/ "
(def parse-body-as-json (data)
 (try 
  (JSON.parse (.to-string (Buffer.concat data)))
  (do 
   (log "Error : while parsing body content")
   [])))

"/****************************************************************
;;  helper function to read the body content
;;  while making POST call on api :: /determine-order
;; 
******************************************************************/ "
(def read-body (req res)
 (var data [])
 (req.on "data" (#(chunk) (data.push chunk)))
 (req.on 
  "end" 
  (#> 
   (var body-content (parse-body-as-json data))  
   (log (+ "processing request [/determine-order : " body-content "]"))
   (var result (determine-order db body-content))
   (res.end (JSON.stringify result)))))


"/****************************************************************
;;  handler function for tasks endpoint :: /determine-order
;; 
******************************************************************/ "
(def order-handler (req res)
 (var method (get req 'method))
 (if (=  method "POST")
  (do 
   (res.write-head 200 {"Content-Type" "text/json"})
   (read-body req res))
  (do
   (res.write-head 405 {"Content-Type" "text/json"})
   (res.end (JSON.stringify unsupported-method)))))


"/****************************************************************
;;  main handler function which routes the call based on the uri 
;; 
******************************************************************/ "
(def server-handler (req res)
 (switch (get req 'url) 
  ("/tasks" (tasks-handler req res))
  ("/determine-order" (order-handler req res))
  (default (index-handler req res))))


"/****************************************************************
;; function to create the server instance and runs it on port : 8001
;; 
******************************************************************/ "
(def start-server () 
 (pipe 
  (require 'http)
  (.create-server server-handler)
  (.listen 8001 "127.0.0.1"))
 (log "server started and listening on 8001"))


"/****************************************************************
;;  function to bootstrap the server 
;; 
******************************************************************/ "
(def start-app ()
 (log "\n")
 (log banner)
  (log "\n\n")
 (log "......initializing database..")
 (init-db "./data.json")
 (log "......starting server..")
 (start-server))

"/****************************************************************
;;  bootstraping the server 
;; 
******************************************************************/ "
(start-app)
